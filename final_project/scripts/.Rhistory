geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.15, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.1, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 1, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 1, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.48, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.58, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = 1, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -1, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.2, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.22, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.18, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.15, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text(family = "Dubois", face = "italic"))
legend_plot
legend_plot <- ggplot(legend_data_frame, aes(x = x, y = y, color = color)) +
geom_point(size = 5) +
geom_text(data = legend_data_frame[1:2, ], aes(label = labels), hjust = 0, vjust = 0.5, size = 1.70, nudge_x = 0.12, color = "black") +
geom_text(data = legend_data_frame[3:5, ], aes(label = labels), hjust = 1, vjust = 0.5, size = 1.70, nudge_x = -0.15, color = "black") +
geom_text(label = "BLACKS.", x = 2.5, y = 4.60, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
geom_text(label = "WHITES.", x = 2.5, y = 0.20, hjust = 0.5, vjust = 0.5, size = 3,  color = "black") +
xlim(c(0, 5)) +
ylim(c(0, 5)) +
scale_color_identity() +
theme_void() +
theme(plot.background = element_rect(fill = "transparent"),
text = element_text())
legend_plot
library(cowplot)
full_dubois_plot <- ggdraw() +
draw_plot(plot) +
draw_plot(legend_plot)
full_dubois_plot
library(ggplot2)
library(tidyverse)
library(ggplot2)
library(tidyverse)
# Data
revenue_data <- data.frame(
Year = c(rep("2017-2018", 5), rep("2018-2019", 5)),
Category = c("Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding",
"Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding"),
Revenue_Millions = c(275.7, 42.6, 127.2, 127.6, 1207.7,
217.8, 31.0, 124.4, 116.9, 1213.7))
revenue_data
# Set factor levels to control stacking order
revenue_data$Category <- factor(revenue_data$Category,
levels = c("Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding"))
# Plot
ggplot(revenue_data, aes(x = Year, y = Revenue_Millions, fill = Category)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(Revenue_Millions, 1), "M")),
position = position_stack(vjust = 0.5), size = 5) +
labs(title = "Revenue Breakdown by Year",
y = "Revenue (in Millions)",
x = "Year") +
theme_minimal() +
scale_fill_brewer(palette = "Set2")
library(ggpattern)
install.packages("ggpattern")
install.packages("ggpattern")
install.packages("ggpattern")
install.packages("ggpattern")
library(ggpattern)
library(ggpattern)
install.packages("ggimage")
library(ggimage)
library(waffle)
library(ggimage)
library(ggplot2)
install.packages("ggpattern")
library(ggpattern)
setwd("~/Desktop/QSS Folder/R_ADV25W/project 1/scripts")
# Define revenue data
revenue_data <- data.frame(
Year = c(rep("2017-2018", 5), rep("2018-2019", 5)),
Category = c("Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding",
"Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding"),
Revenue_Millions = c(275.7, 42.6, 127.2, 127.6, 1207.7,
217.8, 31.0, 124.4, 116.9, 1213.7))
# Convert revenue values to proportions for the waffle chart
revenue_2017_2018 <- revenue_data %>% filter(Year == "2017-2018") %>%
mutate(Revenue_Units = round(Revenue_Millions / 10)) %>%
pull(Revenue_Units, name = Category)
revenue_2018_2019 <- revenue_data %>% filter(Year == "2018-2019") %>%
mutate(Revenue_Units = round(Revenue_Millions / 10)) %>%
pull(Revenue_Units, name = Category)
revenue_2017_2018
revenue_2018_2019
# Define revenue data
revenue_data <- data.frame(
Year = c(rep("2017-2018", 5), rep("2018-2019", 5)),
Category = c("Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding",
"Television", "Digital", "Subscriber Fees", "Financing and other", "Government Funding"),
Revenue_Millions = c(275.7, 42.6, 127.2, 127.6, 1207.7,
217.8, 31.0, 124.4, 116.9, 1213.7))
revenue_data
total_tiles <- 100  # Number of tiles in waffle chart
revenue_data <- revenue_data %>%
group_by(Year) %>%
mutate(Percentage = round((Revenue_Millions / sum(Revenue_Millions)) * total_tiles)) %>%
ungroup()
# Load necessary libraries
library(tidyverse)
revenue_data <- revenue_data %>%
group_by(Year) %>%
mutate(Percentage = round((Revenue_Millions / sum(Revenue_Millions)) * total_tiles)) %>%
ungroup()
revenue_data
tv_image_path <- "R_ADV25W/project 1/documents"
# Expand data for waffle chart (each row represents one tile)
waffle_data <- revenue_data %>%
uncount(Percentage) %>%
mutate(Image = tv_image_path)  # Assign corresponding images
waffle_data
# Generate waffle plot with images
ggplot(waffle_data, aes(x = rep(1:10, length.out = n()), y = -rep(1:10, each = 10, length.out = n()))) +
geom_image(aes(image = Image), size = 0.08) +  # Adjust size as needed
facet_wrap(~ Year) +  # Separate waffle charts for each year
theme_void() +
labs(title = "Revenue Distribution (2017-2019)", subtitle = "Each tile represents a proportion of revenue")
# Generate waffle plot with images
ggplot(waffle_data, aes(x = rep(1:10, length.out = n()), y = -rep(1:10, each = 10, length.out = n()))) +
geom_image(aes(image = "R_ADV25W/project 1/documents"), size = 0.08) +  # Adjust size as needed
facet_wrap(~ Year) +  # Separate waffle charts for each year
theme_void() +
labs(title = "Revenue Distribution (2017-2019)", subtitle = "Each tile represents a proportion of revenue")
# Generate waffle plot with images
ggplot(waffle_data, aes(x = rep(1:10, length.out = n()), y = -rep(1:10, each = 10, length.out = n()))) +
geom_image(aes(image = "project 1/documents"), size = 0.08) +  # Adjust size as needed
facet_wrap(~ Year) +  # Separate waffle charts for each year
theme_void() +
labs(title = "Revenue Distribution (2017-2019)", subtitle = "Each tile represents a proportion of revenue")
## Advanced Data Visualization (QSS 19) Winter 2025
## R Review II: Color Theory, Customization, Plots
##
## Name: Ahron Springer
## Date: January 23, 2025
library(tidyverse) # everything!
library(colorspace) # conversion of RGB to hex code, among other things.
library(colorBlindness) # cool color blind tester.
library(gridExtra) # This is for multiple plots on one visualization.
# Color theory in practice --------------------------------------------------------
# Step 1: Create your own sequential color palette
#Make sequential palette
color_pal <- colorRampPalette(c("#28587B", "#9FB798"))
# Generate 9 colors from the color palette
color_pal <- color_pal(9)
# Print the generated colors to verify
color_pal
# Display the color palette using show_col
show_col(color_pal)
library(tidyverse) # everything!
library(colorspace) # conversion of RGB to hex code, among other things.
library(colorBlindness) # cool color blind tester.
library(gridExtra)
div_pal <- colorRampPalette(c("#2b83ba", "#f7f7f7", "#d7191c"))  # Blue to white to red
# Step 3: Create a qualitative color palette
# Using hexadecimal values for a fixed set of distinctive colors
qual_plot <- c("#56641A", "#C0AFFB", "#E6A176", "#00678A", "#984464", "#5ECCAB", "#CDCDCD")
library(lubridate)
library(colorBlindness)
chicago_data <- read_csv("/Users/ahronspringer/Desktop/QSS Folder/R_ADV25W/week2 hw/data/chi_town.csv")
# Extract month and day for grouping by day of the year
chicago_daily <- chicago_data %>%
mutate(month_day = format(DATE, "%m-%d")) %>%
group_by(month_day) %>%
summarize(avg_TMIN = mean(TMIN, na.rm = TRUE),
avg_TMAX = mean(TMAX, na.rm = TRUE),
.groups = 'drop') %>%
mutate(month_day = as.Date(month_day, format = "%m-%d", origin = "1970-01-01")) # Convert back to Date for plotting
# Create the ribbon plot
daily_plot <- ggplot(chicago_daily, aes(x = month_day)) +
geom_line(aes(y = avg_TMAX), color = "blue") +
geom_ribbon(aes(ymin = avg_TMIN, ymax = avg_TMAX), fill = "lightblue", alpha = 0.5) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") + # Format x-axis as months
labs(title = "Temperature Range by Day of the Year in Chicago",
x = "Month",
y = "Temperature (°F)") +
theme_minimal()
# Apply the cvdPlot function to check accessibility for color blindness
cvdPlot(daily_plot)
# More plots, with a touch of customization --------------------------------------------------------
library(ggridges)
library(ggtext)
# Ensure the `date` column is treated as a Date object
chicago_data$DATE <- as.Date(chicago_data$DATE)
# Extract decade and filter for June temperatures
chicago_june <- chicago_data %>%
filter(month(DATE) == 6) %>%
mutate(decade = paste0(floor(year(DATE) / 10) * 10, "s"))
# Create a density ridgeline plot
density_ridgeline_plot <- ggplot(chicago_june, aes(x = TAVG, y = decade, fill = decade)) +
geom_density_ridges(scale = 1, rel_min_height = 0.01) +
scale_fill_brewer(palette = "Spectral") +
labs(
title = "Distribution of Average Temperatures in June by Decade",
subtitle = "<span style='color:#D53E4F;'>1960s</span> vs <span style='color:#3288BD;'>2010s</span>",
x = "Average Temperature (°F)",
y = "Decade",
caption = "Data source: chitown.csv"
) +
theme_minimal() +
theme(
plot.title = element_markdown(size = 16, face = "bold"),
plot.subtitle = element_markdown(size = 12),
legend.position = "none")
density_ridgeline_plot
#Step 2: Raincloud Plot
library(ggdist)
decade_colors <- color_pal(length(unique(chicago_june$decade)))
# Create a raincloud plot
raincloud_plot <- ggplot(chicago_june, aes(x = TAVG , y = decade, fill = decade)) +
stat_halfeye(adjust = 0.6, width = 0.6, .width = 0, justification = -0.2, point_color = "black") +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
geom_jitter(aes(color = decade), width = 0.1, alpha = 0.6, size = 1) +
scale_fill_manual(values = decade_colors) +
scale_color_manual(values = decade_colors) +
labs(
title = "Raincloud Plot: Average Temperatures in June by Decade",
subtitle = "<span style='color:#28587B;'>1960s</span> vs <span style='color:#9FB798;'>2010s</span>",
x = "Decade",
y = "Average Temperature (°F)",
caption = "Data source: chitown.csv"
) +
theme_minimal() +
theme(
plot.title = element_markdown(size = 16, face = "bold"),
plot.subtitle = element_markdown(size = 12),
legend.position = "none")
# Print the plot
raincloud_plot
# Define custom color palette
color_pal <- colorRampPalette(c("#28587B", "#9FB798"))
decade_colors <- color_pal(length(unique(chicago_june$decade)))
# Create a raincloud plot
raincloud_plot <- ggplot(chicago_june, aes(x = TAVG , y = decade, fill = decade)) +
stat_halfeye(adjust = 0.6, width = 0.6, .width = 0, justification = -0.2, point_color = "black") +
geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.5) +
geom_jitter(aes(color = decade), width = 0.1, alpha = 0.6, size = 1) +
scale_fill_manual(values = decade_colors) +
scale_color_manual(values = decade_colors) +
labs(
title = "Raincloud Plot: Average Temperatures in June by Decade",
subtitle = "<span style='color:#28587B;'>1960s</span> vs <span style='color:#9FB798;'>2010s</span>",
x = "Decade",
y = "Average Temperature (°F)",
caption = "Data source: chitown.csv"
) +
theme_minimal() +
theme(
plot.title = element_markdown(size = 16, face = "bold"),
plot.subtitle = element_markdown(size = 12),
legend.position = "none")
# Print the plot
raincloud_plot
library(waffle)
# Calculate average temperature for each month-day across all years
chicago_daily_avg <- chicago_data %>%
mutate(month_day = format(DATE, "%m-%d")) %>%
group_by(month_day) %>%
summarize(avg_TAVG = mean(TAVG, na.rm = TRUE), .groups = 'drop')
# Merge with original data to calculate deviations
chicago_data <- chicago_data %>%
mutate(month_day = format(DATE, "%m-%d")) %>%
left_join(chicago_daily_avg, by = "month_day") %>%
mutate(deviation = TAVG - avg_TAVG)
# Filter data for the two periods: 1960-1964 and 2016-2020
chicago_1960s <- chicago_data %>% filter(year(DATE) >= 1960 & year(DATE) <= 1964)
chicago_2010s <- chicago_data %>% filter(year(DATE) >= 2016 & year(DATE) <= 2020)
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(
above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100
) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")}
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(
above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")}
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(
above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")}
percent_1960s <- calc_percentage(chicago_1960s)
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")}
# Calculate percentages of days above and below average for each period
calc_percentage <- function(data) {
data %>%
mutate(above_avg = deviation > 0) %>%
summarize(above = sum(above_avg, na.rm = TRUE) / n() * 100,
below = 100 - sum(above_avg, na.rm = TRUE) / n() * 100) %>%
pivot_longer(cols = c(above, below), names_to = "category", values_to = "percentage")
}
percent_1960s <- calc_percentage(chicago_1960s)
percent_2010s <- calc_percentage(chicago_2010s)
# Create waffle plots for both periods
waffle_1960s <- ggplot(percent_1960s, aes(fill = category, values = percentage)) +
geom_waffle(n_rows = 10, size = 0.3, color = "white") +
scale_fill_manual(values = c("#28587B", "#9FB798"), labels = c("Above Avg", "Below Avg")) +
labs(title = "1960-1964",  x = "Categories", y = "Percentage") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 14, face = "bold")
)
waffle_2010s <- ggplot(percent_2010s, aes(fill = category, values = percentage)) +
geom_waffle(n_rows = 10, size = 0.3, color = "white") +
scale_fill_manual(values = c("#28587B", "#9FB798"), labels = c("Above Avg", "Below Avg")) +
labs(title = "2016-2020",  x = "Categories", y = "Percentage") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(size = 14, face = "bold")
)
# Combine the two waffle plots side by side
library(patchwork)
combined_waffles <- waffle_1960s + waffle_2010s +
plot_annotation(title = "Percentage of Days Above and Below Average Temperature",
subtitle = "Comparison of 1960-1964 and 2016-2020")
combined_waffles
percent_1960s
percent_2010s
revenue_data <- revenue_data %>%
group_by(Year) %>%
mutate(Percentage = round((Revenue_Millions / sum(Revenue_Millions)) * total_tiles)) %>%
ungroup()
revenue_data
# Expand data for waffle chart (each row represents one tile)
waffle_data <- revenue_data %>%
uncount(Percentage) %>%
mutate(Image = tv_image_path)  # Assign corresponding images
# Generate waffle plot with images
ggplot(waffle_data, aes(x = rep(1:10, length.out = n()), y = -rep(1:10, each = 10, length.out = n()))) +
geom_image(aes(image = Image), size = 0.08) +  # Adjust size as needed
facet_wrap(~ Year) +  # Separate waffle charts for each year
theme_void() +
labs(title = "Revenue Distribution (2017-2019)", subtitle = "Each tile represents a proportion of revenue")
install.packages("baffle")
library(baffle)
# Create the waffle plot
baffle(revenue_data,
rows = 10,  # Number of rows
image = tv_image_path,  # Image URLs
legend_title = "Pet Types",
text_size = 10) +
theme_minimal()
